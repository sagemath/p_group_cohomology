//*****************************************************************************
//
//    Computation of Dickson Invariants
//
//    Copyright (C) 2009 Simon A. King <simon.king@uni-jena.de>
//
//    This file is part of p_group_cohomology.
//
//    p_group_cohomoloy is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 2 of the License, or
//    (at your option) any later version.
//
//    p_group_cohomoloy is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with p_group_cohomoloy.  If not, see <http://www.gnu.org/licenses/>.
//*****************************************************************************

LIB "general.lib";
LIB "polylib.lib";
//LIB "ring.lib"; // for changeord

// Auxiliar procedure, since NF in non-commutative rings now removes zeroes from ideals:
proc Normalize(ideal id, ideal GB)
"USAGE:      Normalize(id,GB); id, GB ideals, GB standard
RETURN:     an ideal, with normalize(NF(id[i],GB)) at position i for all i.
"
{ if (char(basering) == 2) { return(normalize(NF(id,GB))); }
	ideal OUT;
	for (int i = ncols(id); i>0; i--)
	{ OUT[i] = normalize(NF(id[i],GB));
	}
	return(OUT);
}

proc degvec(ideal I)
"USAGE:  degvec(I);
         I an <ideal>.
RETURN:  the <intvec> of degrees of the generators of I.
"
{ intvec v;
  for (int j = 1;j<=ncols(I);j++)
  { v[j]=deg(I[j]);
  }
  return(v);
}

// Tools for simultaneous algebra containment


// sumring(int p, intvec(n_1,n_2,...)) returns a qring of characteristic p 
// with blocks of n_1,n_2,... variables so that the product of two variables
// in *different* blocks equals zero.,
// Moreover, the q-ring contains a list <maps> of ideals of size n_i, 
// helping to define a map from a ring with n_i variables to block number i.
proc sumring(int p, intvec ranks, intvec finalblock,int modus)
{ intvec vard;
  int dgb = degBound;
  degBound = 0;
  for (int a=1;a<=sum(ranks);a++)
  { if (p==2) 
      { vard[a]=1; }
    else
      { vard[a]=2; }
  }
  //vard=vard,finalblock;
  intvec total;
  if (modus)
    { total = vard,finalblock;
      ring r = p, (y(1..sum(ranks)),t(1..size(finalblock))),(a(total),dp(sum(ranks)),dp);
    }
  else
    { total = finalblock,vard;
      ring r = p, (t(1..size(finalblock)),y(1..sum(ranks))), (a(total),dp(size(finalblock)),dp);
    }  

  ideal I;
  int sz;
  int b,c,d, a_off, b_off;
  for (a=1;a<size(ranks);a++)
  { b_off = a_off + ranks[a];
    for (b=a+1;b<=size(ranks);b++)
    { for (c=1;c<=ranks[a];c++)
      { for (d=1;d<=ranks[b];d++)
        { sz++;
          I[sz]=y(a_off+c)*y(b_off+d);
        }
      }
      b_off = b_off + ranks[b];
    }
    a_off = a_off + ranks[a];
  }
  qring q = groebner(I);
  list maps;
  a_off=0;
  for (a=1;a<=size(ranks);a++)
  { maps[a]=ideal();
    for (b=1;b<=ranks[a];b++)
    { a_off++;
      maps[a][b] = y(a_off);
    }
  }
  export(maps);
  return(q);
}


///////////////////////////////
//
//  Computation of Dickson invariants
//

// Auxiliary function: Product of X-v over a (k-1)-dimensional subspace
proc L_factor(int t, int k)
{ def br=basering;
  if (t+k>nvars(br))
    { ERROR("The sum of the arguments must not exceed the number of variables of basering");
    }
  if (k==1)
    { return(var(t+1));
    }
  int p = char(br);
  poly OUT=var(t+k)^(p^(k-1));
  for (int s=0;s<k-1;s++)
    { OUT = OUT + (-1)^(k-s-1) * var(t+k)^(p^s)*Dickson_invariant(t,k-1,s);
    }
  return(OUT);
}

// Auxiliary function: Product of L_factor(t, 1..n)
proc L_poly(int t, int n)
{ def br=basering;
  if (t+n>nvars(br))
    { ERROR("The sum of the arguments must not exceed the number of variables of basering");
    }
  poly p=1;
  for (int k=1;k<=n;k++)
    { p = p*L_factor(t,k);
    }
  return(p);
}
  

////
// Main procedure: Compute the Dickson invariants
proc Dickson_invariant (int t, int n, int s)
"USAGE:   Dickson_invariant(t,n,s); t,n,s integers
RETURN:  The Dickson invariant of degree p^n-p^s, where
         p is the characteristic of basering. The variables
         are var(t+1),...,var(t+n) of basering.
ASSUME:  The first t+n variables have to be in the commutative
         part of basering. The characteristic must not be zero.
EXAMPLE: example Dickson; shows an example
"
{ def br=basering;
  if (t<0) {ERROR("first argument must be non-negative");}
  if (n<1) {ERROR("second argument must be positive");}
  if (s<0) {ERROR("third argument must be non-negative");}
  if (s>n) {ERROR("third argument must not exceed second argument");}
  int p=char(br);
  if (p==0) {ERROR("characteristic must not be zero");}

  if (s==0) {return(L_poly(t,n)^(p-1));}
  if (n==s) {return(1);}
  return (Dickson_invariant(t,n-1,s)*L_factor(t,n)^(p-1) + Dickson_invariant(t,n-1,s-1)^p);
}
example
{ "EXAMPLE:"; echo = 2;
  ring r=3,(x,y,z),dp;
  Dickson_invariant(0,2,0);
}

////
// Main procedure: Compute the Dickson invariants modified
// for use in group cohomology
proc Delta (int r, int z, int t, int i, list #)
"USAGE:   Delta(r, z,t,i); r,z,t,i integers
RETURN:  The modified Dickson invariant of degree p^(r-z)-p^(r-z-i)
         used in the computation of cohomology rings, where
         p is the characteristic of basering. 
ASSUME:  r is the p-rank of the group, z is the p-rank of its center,
         z+t is the rank of some maximal elementary abelian subgroup.
         The variables var(1),...,var(z) correspond to the greatest central elementary 
         abelian subgroup. The variables var(1),...,var(z+t) correspond to the maximal
         elementary abelian subgroup whose cohomology ring is given by basering.
         The characteristic must not be zero.
EXAMPLE: example Delta; shows an example
"
{ def br=basering;
  int p = char(br);
  if (p==0){ERROR("characteristic must not be zero");}
  if (z+t>nvars(br)){ERROR("not enough variables");}
  if (r<0 or z<0 or t<0){ERROR("p-ranks (first three arguments) must not be negative");}
  if (r<z+t){ERROR("p-rank of the group (first argument) is at least the sum of the second and third argument");}
  if (i<0 or i>r-z){ERROR("last argument must range from 0 to "+string(r-z));}

  if(r==z+t)
    { return(Dickson_invariant(z,r-z,r-z-i));}
  if (i>t)
    { return(0);}
  return(Dickson_invariant(z,t,t-i)^(p^(r-z-t)));
}
example
{ "EXAMPLE:"; echo = 2;
  ring r=3,(x,y,z),dp;
  Delta(3,1,2,1);
}

//////////////////////////////////////////////////
// Given restrictions of the generators, try and find
// polynomials that restrict simultaneously to modified
// Dickson invariants.
// basering must be the cohomology ring of the group, and 
// the function's last argument is a list providing the
// polynomial part of cohomology rings of the group's 
// maximal elementary abelian subgroups. These rings
// must contain matrices providing the restrictions modulo 
// nilradical of basering's variables to the subgroups.
// The first argument is the rank of the center of the group.

proc ringweights(def P)
{ setring P;
  intvec rw;
  for (int i=1;i<=nvars(P);i++)
  { rw[i]=deg(var(i));
  }
  return(rw);
}

proc simult_Dickson(int r, int z, intvec restdeg, list L)
{ int maxpower = 3; // we try lifting out to Dickson^(p^(maxpower-1))
  int dgb = degBound;
  // check input
  def br = basering;
  int n = nvars(br);
  //  print (n);
  int p = char(br);
  if (r<0 or z<0 or z>r) {ERROR("first or second argument are mistaken");}
  if (size(L)==0){ERROR("last argument must not be empty");}
  intvec iv;
  int i,j;
  for (i=1;i<=size(L);i++)
    { if ((typeof(L[i])!="ring") and (typeof(L[i])!="qring")){ERROR("last argument must be a list of rings");}
      if (char(L[i])!=p){ERROR("characteristic of the rings in the list must coincide with char. of basering");}
      if ((p==2) and (nvars(L[i])>r)){ERROR("rank of a maximal elementary abelian subgroup can not exceed the p-rank of the group");}
      if ((p!=2) and (nvars(L[i])>2*r)){ERROR("rank of a maximal elementary abelian subgroup can not exceed the p-rank of the group");}
      if (p==2)
	{ iv[i] = nvars(L[i]);
	}
      else
	{ iv[i] = nvars(L[i]) / 2;
	}
      setring L[i];
      if (not defined(REST)){ERROR("rings in the list must contain a <matrix> REST");}
      if (typeof(REST)!="matrix"){ERROR("Restrictions must be provided by a <matrix>");}
      if ((nrows(REST)!=1) or (ncols(REST)!=n)){print (REST);print (ncols(REST));print (nrows(REST));print (n);ERROR("Restriction matrix has the wrong size");}
    }

  // Put Dickson polynomials into L[i].
  // They will only use the first half of variables in case p!=2.
  // So, we *need* to assume that the first variables are of even degree!
  def tmpR;
  degBound = 0;
  for (i=1;i<=size(L);i++)
    { tmpR = L[i];
      setring tmpR;
      matrix delta[1][r-z];
      for (j=1;j<=r-z;j++)
	{ if (p==2)
	    { delta[1,j] = Delta(r,z,nvars(L[i])-z,j);
	    }
	  else
	    { delta[1,j] = Delta(r,z,int(nvars(L[i]))/2-z,j);
	    }
	}
    }

  // We need to make the polynomials wheighted homogeneous
  //ring tmp = p, (t(1..n)), (wp(restdeg));
  setring br;
  def R = sumring(p,iv,restdeg,1); // defines blocks according to iv (degrees 1 or 2), 
                                   // and a final block with weights restdeg
  def RHilb = sumring(p,iv,restdeg,0);

  setring R;
  //print (R);
  // make the maps from L[i] to R:
  //def maps = fetch(sr,maps);
  map tmpM;
  poly tmpP;
  matrix rest[1][n];
  for (i=1;i<=n;i++)
    { rest[1,i] = t(i);
    }
  //kill tmp;
  for (j=1;j<=size(L);j++)
    { def tmp = L[j];
      tmpM = tmp,maps[j];
      rest = rest - tmpM(REST);
      //print(tmpM(REST));
      //print("->stage"+string(j));
      //print(ideal(rest));
      kill tmp;
    }
  //print(ideal(rest));
  
  // The maximal degree of Dickson inv. is p^(r-z)-1, and 
  // we have this to the power of p^maxpower
  if (p==2)
    { degBound = (p^(r-z)-1)*p^(maxpower-1);
    }
  else
    { degBound = 2*(p^(r-z)-1)*p^(maxpower-1);
    }
  // degBound = 0;
  // Find Hilbert function
  setring RHilb;
  ideal G = groebner(ideal(imap(R,rest)));
  intvec hv = hilb(G,1,ringweights(RHilb));
  setring R;
  kill RHilb;
  ideal G = std(ideal(rest),hv,ringweights(R));
  //print(G);

  // test whether the deltas can be simultaneously lifted
  matrix delta[1][r-z];
  for (i=1;i<=size(L);i++)
    { def tmp = L[i];
      tmpM = tmp,maps[i];
      delta = delta + tmpM(delta);
      kill tmp;
    }
  //print(ideal(delta));
  // Try to rewrite the Delta-polynomials as a polynomial in the restrictions
  matrix liftdelta[1][ncols(delta)];
  poly liftcandidate, LIFT;
  ideal el = std(simplify(NF(maxideal(1),std(ideal(t(1..n)))),2));
  for (i=1;i<=ncols(delta);i++)
    { liftcandidate = delta[1,i]; // try to lift this, or a power of it
      for (j=1;j<=maxpower;j++)
        { if (j!=1) { liftcandidate = liftcandidate^p; }
          LIFT = NF(liftcandidate,G);
	  //print (LIFT);
          if (LIFT == NF(LIFT,el)) //lifting succeeded!
            { liftdelta[1,i] = LIFT;
              break;
            }
        }
      if (j>maxpower) { return(0); } // no "small" power of delta[1,i] was liftable
    }
  // We arrived here, so, small powers of all Dicksons are lifted!
  // So, we can return them to our original ring.
  setring br;
  ideal back;
  back[(sum(iv)+1)..nvars(R)] = maxideal(1);
  map backmap = R,back;
  degBound = dgb;
  return(backmap(liftdelta));
}

//////////////////////////////////////////////////////////////////

proc cosetIntersect(matrix pI, ideal I, matrix pJ, ideal inJ, list #) //int maxExp)
"Test whether pI[1,i]+I intersects pJ[1,i]+J non-trivially for all i (perhaps after raising to some p-power bounded by
maxExp), and return a whitness
"
{ def br = basering;
  if (size(#)==0) { return 0; }
  int dgb = degBound;
  if ((nrows(pI)<>1) or (nrows(pJ)<>1) or (ncols(pI)<>ncols(pJ))) { return 0; }
  degBound = 0;
  int n = ncols(inJ);
  ideal J;
  J[n]=0;
  int i,j,k,expo;
  k=n+1;
  if (char(br)%2) {
  for (i=1;i<=n;i++)
  { if (deg(inJ[i])%2)
    { k--;
      J[k] = inJ[i];
    }
    else
    { j++;
      J[j] = inJ[i];
    }
  } }
  else { J = inJ; }
  ring r = char(br), (@y(1..n)),wp(degvec(J));
  if (char(br)<>2) 
  { def rr = SuperCommutative(k,n);
    def R = br + rr;
  }
  else
  { def R = br + r;
  }
  setring R;
  ideal Test = @y(1..n);
  Test = groebner(Test);
  ideal I = imap(br,I);
  ideal J = imap(br,J);
  matrix pI = imap(br,pI);
  matrix pJ = imap(br,pJ);
  ideal indicator;
  indicator=ideal(pI-pJ);
  for (i=1;i<=n;i++)
    { J[i] = J[i]-@y(i);
    }
  ideal G = groebner(I+J);
  ideal Result;
  for (expo = 1; expo<=size(#);expo++)
  { // If one item is not yet lifted, try with a power
    for (i=1;i<=ncols(pI);i++)
    { if (indicator[i]<>0)
	{ pI[1,i] = (pI[1,i])**(#[expo]); // char(br)**expo);
	  pJ[1,i] = (pJ[1,i])**(#[expo]); // char(br)**expo);
	}
    }
    Result = NF(ideal(pI-pJ),G);
    indicator = NF(Result,Test);
    if (size(indicator)==0) { break; }
  }
  if (size(indicator)<>0)
    { return(0);
    }
  // Now, Result becomes a whitness, after replacing @y(i) with J[i]
  Result = ideal(matrix(Result)+pJ);
  setring br;
  ideal mapI = maxideal(1),J;
  map f = R, mapI;
  return(matrix(f(Result)));
}

// The Dickson invariants are used in group cohomology to construct
// filter regular parameter systems. Filter regularity can be tested
// using Hilbert functions. Computation of Hilbert functions relies
// on computing quotients of monomial ideals by monomials. Thus, the
// following function somehow fits into the scope of this module;
// it is a lot faster than calling quotient(id,m).

proc monomial_quotient(ideal id, poly m)
{
   int i;
   int sz = ncols(id);
   id[2*sz]=0;
   for (i=1;i<=sz;i++)
   { id[i+sz]=id[i]/gcd(id[i],m);
   }
   return(interred(id));
}
